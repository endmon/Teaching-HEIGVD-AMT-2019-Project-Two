/*
 * User Api
 * An API to manage users
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.heigvd.users.api;

import ch.heigvd.users.ApiCallback;
import ch.heigvd.users.ApiClient;
import ch.heigvd.users.ApiException;
import ch.heigvd.users.ApiResponse;
import ch.heigvd.users.Configuration;
import ch.heigvd.users.Pair;
import ch.heigvd.users.ProgressRequestBody;
import ch.heigvd.users.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ch.heigvd.users.api.dto.User;
import ch.heigvd.users.api.dto.UserCredentials;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for changePassword
     * @param email  (required)
     * @param jwttoken header containing a JWT Token (required)
     * @param newPassword  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> changed password successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized to change password </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> token error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(String email, String jwttoken, String newPassword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newPassword;

        // create path and map variables
        String localVarPath = "/users/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (jwttoken != null) {
            localVarHeaderParams.put("jwttoken", localVarApiClient.parameterToString(jwttoken));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(String email, String jwttoken, String newPassword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling changePassword(Async)");
        }
        
        // verify the required parameter 'jwttoken' is set
        if (jwttoken == null) {
            throw new ApiException("Missing the required parameter 'jwttoken' when calling changePassword(Async)");
        }
        
        // verify the required parameter 'newPassword' is set
        if (newPassword == null) {
            throw new ApiException("Missing the required parameter 'newPassword' when calling changePassword(Async)");
        }
        

        okhttp3.Call localVarCall = changePasswordCall(email, jwttoken, newPassword, _callback);
        return localVarCall;

    }

    /**
     * 
     * change user password
     * @param email  (required)
     * @param jwttoken header containing a JWT Token (required)
     * @param newPassword  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> changed password successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized to change password </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> token error </td><td>  -  </td></tr>
     </table>
     */
    public void changePassword(String email, String jwttoken, String newPassword) throws ApiException {
        changePasswordWithHttpInfo(email, jwttoken, newPassword);
    }

    /**
     * 
     * change user password
     * @param email  (required)
     * @param jwttoken header containing a JWT Token (required)
     * @param newPassword  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> changed password successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized to change password </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> token error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changePasswordWithHttpInfo(String email, String jwttoken, String newPassword) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(email, jwttoken, newPassword, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * change user password
     * @param email  (required)
     * @param jwttoken header containing a JWT Token (required)
     * @param newPassword  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> changed password successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized to change password </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> token error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(String email, String jwttoken, String newPassword, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(email, jwttoken, newPassword, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserByEmail
     * @param email  (required)
     * @param jwttoken header containing a JWT Token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user informations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized to check user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserByEmailCall(String email, String jwttoken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (jwttoken != null) {
            localVarHeaderParams.put("jwttoken", localVarApiClient.parameterToString(jwttoken));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByEmailValidateBeforeCall(String email, String jwttoken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling getUserByEmail(Async)");
        }
        
        // verify the required parameter 'jwttoken' is set
        if (jwttoken == null) {
            throw new ApiException("Missing the required parameter 'jwttoken' when calling getUserByEmail(Async)");
        }
        

        okhttp3.Call localVarCall = getUserByEmailCall(email, jwttoken, _callback);
        return localVarCall;

    }

    /**
     * 
     * get user informations
     * @param email  (required)
     * @param jwttoken header containing a JWT Token (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user informations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized to check user </td><td>  -  </td></tr>
     </table>
     */
    public User getUserByEmail(String email, String jwttoken) throws ApiException {
        ApiResponse<User> localVarResp = getUserByEmailWithHttpInfo(email, jwttoken);
        return localVarResp.getData();
    }

    /**
     * 
     * get user informations
     * @param email  (required)
     * @param jwttoken header containing a JWT Token (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user informations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized to check user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserByEmailWithHttpInfo(String email, String jwttoken) throws ApiException {
        okhttp3.Call localVarCall = getUserByEmailValidateBeforeCall(email, jwttoken, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get user informations
     * @param email  (required)
     * @param jwttoken header containing a JWT Token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user informations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized to check user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserByEmailAsync(String email, String jwttoken, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByEmailValidateBeforeCall(email, jwttoken, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for login
     * @param userCredentials  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> logged in </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong user credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginCall(UserCredentials userCredentials, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userCredentials;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(UserCredentials userCredentials, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userCredentials' is set
        if (userCredentials == null) {
            throw new ApiException("Missing the required parameter 'userCredentials' when calling login(Async)");
        }
        

        okhttp3.Call localVarCall = loginCall(userCredentials, _callback);
        return localVarCall;

    }

    /**
     * 
     * log with JWT token
     * @param userCredentials  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> logged in </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong user credentials </td><td>  -  </td></tr>
     </table>
     */
    public String login(UserCredentials userCredentials) throws ApiException {
        ApiResponse<String> localVarResp = loginWithHttpInfo(userCredentials);
        return localVarResp.getData();
    }

    /**
     * 
     * log with JWT token
     * @param userCredentials  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> logged in </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong user credentials </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> loginWithHttpInfo(UserCredentials userCredentials) throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(userCredentials, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * log with JWT token
     * @param userCredentials  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> logged in </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong user credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginAsync(UserCredentials userCredentials, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(userCredentials, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for register
     * @param jwttoken header containing a JWT Token (required)
     * @param user  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> request not permitted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> user mail already registered </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> token error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerCall(String jwttoken, User user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (jwttoken != null) {
            localVarHeaderParams.put("jwttoken", localVarApiClient.parameterToString(jwttoken));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerValidateBeforeCall(String jwttoken, User user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jwttoken' is set
        if (jwttoken == null) {
            throw new ApiException("Missing the required parameter 'jwttoken' when calling register(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling register(Async)");
        }
        

        okhttp3.Call localVarCall = registerCall(jwttoken, user, _callback);
        return localVarCall;

    }

    /**
     * 
     * create a user
     * @param jwttoken header containing a JWT Token (required)
     * @param user  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> request not permitted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> user mail already registered </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> token error </td><td>  -  </td></tr>
     </table>
     */
    public void register(String jwttoken, User user) throws ApiException {
        registerWithHttpInfo(jwttoken, user);
    }

    /**
     * 
     * create a user
     * @param jwttoken header containing a JWT Token (required)
     * @param user  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> request not permitted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> user mail already registered </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> token error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registerWithHttpInfo(String jwttoken, User user) throws ApiException {
        okhttp3.Call localVarCall = registerValidateBeforeCall(jwttoken, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * create a user
     * @param jwttoken header containing a JWT Token (required)
     * @param user  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> request not permitted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> user mail already registered </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> token error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerAsync(String jwttoken, User user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerValidateBeforeCall(jwttoken, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
